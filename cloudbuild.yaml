steps:
  # Install dependencies
  - name: 'gcr.io/cloud-builders/npm'
    id: 'install-deps'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing production dependencies..."
        npm install express@^4.18.2 cors@^2.8.5 dotenv@^16.0.3 mongoose@^7.0.3 multer@^1.4.5-lts.1 ethers@^6.0.0 --production --legacy-peer-deps
        echo "Dependencies installed successfully"

  # Enable App Engine API
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'enable-apis'
    args: ['services', 'enable', 'appengine.googleapis.com']
    waitFor: ['-']

  # Create deployment files
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-files'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating deployment files..."
        
        # Check if server.js exists
        if [ -f "server.js" ]; then
          echo "✓ Found existing server.js file"
          echo "First few lines of existing server.js:"
          head -10 server.js
        else
          echo "Creating server.js..."
          cat > server.js << 'EOF'
        const express = require('express');
        const cors = require('cors');
        const dotenv = require('dotenv');
        
        dotenv.config();
        
        const app = express();
        const PORT = process.env.PORT || 8080;
        
        app.use(cors());
        app.use(express.json());
        
        app.get('/health', (req, res) => {
          res.status(200).json({
            status: 'healthy',
            timestamp: new Date().toISOString(),
            version: '1.0.0'
          });
        });
        
        app.get('/api/status', (req, res) => {
          res.json({
            message: 'MyVote Backend API is running',
            contractAddress: process.env.CONTRACT_ADDRESS || 'Not configured'
          });
        });
        
        app.listen(PORT, () => {
          console.log('Server running on port ' + PORT);
        });
        EOF
        fi
        
        # Create clean package.json for deployment (no hardhat deps)
        echo "Creating deployment package.json without hardhat dependencies..."
        cat > package.json << 'EOF'
        {
          "name": "myvote-backend",
          "version": "1.0.0",
          "description": "MyVote Backend API",
          "main": "server.js",
          "scripts": {
            "start": "node server.js"
          },
          "dependencies": {
            "express": "^4.18.2",
            "cors": "^2.8.5",
            "dotenv": "^16.0.3",
            "mongoose": "^7.0.3",
            "multer": "^1.4.5-lts.1",
            "ethers": "^6.0.0"
          },
          "engines": {
            "node": "20.x",
            "npm": "10.x"
          }
        }
        EOF
        
        # Create app.yaml
        echo "Creating app.yaml..."
        cat > app.yaml << 'EOF'
        runtime: nodejs20
        env: standard
        
        env_variables:
          NODE_ENV: 'production'
          PORT: '8080'
          CONTRACT_ADDRESS: "${_CONTRACT_ADDRESS}"
          SEPOLIA_RPC_URL: "${_SEPOLIA_RPC_URL}"
          ADMIN_ADDRESS: "${_ADMIN_ADDRESS}"
          MONGODB_URI: "${_MONGODB_URI}"
          ENCRYPTION_KEY: "${_ENCRYPTION_KEY}"
        
        automatic_scaling:
          min_instances: 1
          max_instances: 5
          max_concurrent_requests: 80
        
        instance_class: F2
        
        readiness_check:
          path: "/health"
          check_interval_sec: 5
          timeout_sec: 4
          failure_threshold: 2
          success_threshold: 2
          app_start_timeout_sec: 300
        
        liveness_check:
          path: "/health"
          check_interval_sec: 30
          timeout_sec: 4
          failure_threshold: 2
          success_threshold: 2
        
        network:
          session_affinity: false
        EOF
        
        # Create .gcloudignore to exclude development files
        cat > .gcloudignore << 'EOF'
        .git
        .github
        .gitignore
        .vscode/
        test/
        contracts/
        hardhat.config.js
        artifacts/
        cache/
        scripts/
        *.md
        .env
        .env.*
        Dockerfile
        .dockerignore
        node_modules/.cache/
        npm-debug.log*
        yarn-debug.log*
        yarn-error.log*
        # Exclude hardhat development files
        @nomiclabs/
        @nomicfoundation/
        @typechain/
        typechain/
        hardhat/
        EOF
        
        # Remove package-lock.json to avoid conflicts
        rm -f package-lock.json
        
        # Ensure required directories exist
        mkdir -p uploads
        mkdir -p public
        
        echo "Files prepared successfully"
        ls -la
    waitFor: ['install-deps']

  # Deploy to App Engine  
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Starting deployment..."
        
        # Verify required files
        for file in server.js package.json app.yaml; do
          if [ ! -f "$file" ]; then
            echo "ERROR: Missing $file"
            exit 1
          else
            echo "✓ Found: $file"
          fi
        done
        
        # Check dependencies
        if [ ! -d "node_modules" ]; then
          echo "Installing dependencies..."
          npm install --production
        fi
        
        # Deploy
        if gcloud app describe &>/dev/null; then
          echo "Deploying to App Engine..."
          gcloud app deploy --quiet --verbosity=info
          
          if [ $? -eq 0 ]; then
            echo "Deployment completed successfully!"
            gcloud app browse --no-launch-browser
          else
            echo "Deployment failed!"
            exit 1
          fi
        else
          echo "App Engine application does not exist."
          echo "Create it at: https://console.cloud.google.com/appengine"
        fi
    waitFor: ['create-files', 'enable-apis']

substitutions:
  _CONTRACT_ADDRESS: '0x1234567890123456789012345678901234567890'
  _PRIVATE_KEY: ''
  _ADMIN_ADDRESS: ''
  _SEPOLIA_RPC_URL: ''
  _MONGODB_URI: ''
  _ENCRYPTION_KEY: ''

timeout: '900s'

options:
  logging: CLOUD_LOGGING_ONLY