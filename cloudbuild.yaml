steps:
  # Install dependencies
  - name: 'gcr.io/cloud-builders/npm'
    id: 'install-deps'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing production dependencies..."
        npm install express@^4.18.2 cors@^2.8.5 dotenv@^16.0.3 mongoose@^7.0.3 multer@^1.4.5-lts.1 ethers@^6.0.0 --legacy-peer-deps
        echo "Dependencies installed successfully"

  # Enable App Engine API
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'enable-apis'
    args: ['services', 'enable', 'appengine.googleapis.com']
    waitFor: ['-']

  # Create deployment files
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-files'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating deployment files..."
        
        # Create server.js if it doesn't exist
        if [ ! -f "server.js" ]; then
          echo "Creating server.js..."
          cat << 'SERVERJS' > server.js
        const express = require('express');
        const cors = require('cors');
        const dotenv = require('dotenv');
        
        dotenv.config();
        
        const app = express();
        const PORT = process.env.PORT || 8080;
        
        app.use(cors());
        app.use(express.json());
        
        app.get('/health', (req, res) => {
          res.status(200).json({
            status: 'healthy',
            timestamp: new Date().toISOString(),
            version: '1.0.0'
          });
        });
        
        app.get('/api/status', (req, res) => {
          res.json({
            message: 'MyVote Backend API is running',
            contractAddress: process.env.CONTRACT_ADDRESS || 'Not configured'
          });
        });
        
        app.listen(PORT, () => {
          console.log('Server running on port ' + PORT);
        });
        SERVERJS
        fi
        
        # Create package.json
        cat << 'PACKAGEJSON' > package.json
        {
          "name": "myvote-backend",
          "version": "1.0.0",
          "description": "MyVote Backend API",
          "main": "server.js",
          "scripts": {
            "start": "node server.js"
          },
          "dependencies": {
            "express": "^4.18.2",
            "cors": "^2.8.5",
            "dotenv": "^16.0.3",
            "mongoose": "^7.0.3",
            "multer": "^1.4.5-lts.1",
            "ethers": "^6.0.0"
          },
          "engines": {
            "node": "20.x",
            "npm": "10.x"
          }
        }
        PACKAGEJSON
        
        # Use existing app.yaml or create a simple one
        if [ ! -f "app.yaml" ]; then
          echo "Creating app.yaml..."
          cat << 'APPYAML' > app.yaml
        runtime: nodejs20
        env: standard
        
        env_variables:
          NODE_ENV: 'production'
          PORT: '8080'
          CONTRACT_ADDRESS: "${_CONTRACT_ADDRESS}"
          SEPOLIA_RPC_URL: "${_SEPOLIA_RPC_URL}"
          ADMIN_ADDRESS: "${_ADMIN_ADDRESS}"
          MONGODB_URI: "${_MONGODB_URI}"
          ENCRYPTION_KEY: "${_ENCRYPTION_KEY}"
        
        automatic_scaling:
          min_instances: 1
          max_instances: 5
          max_concurrent_requests: 80
        
        instance_class: F2
        
        readiness_check:
          path: "/health"
          check_interval_sec: 5
          timeout_sec: 4
          failure_threshold: 2
          success_threshold: 2
          app_start_timeout_sec: 300
        
        liveness_check:
          path: "/health"
          check_interval_sec: 30
          timeout_sec: 4
          failure_threshold: 2
          success_threshold: 2
        
        network:
          session_affinity: false
        APPYAML
        else
          echo "Using existing app.yaml file"
        fi
        
        # Create .gcloudignore
        cat << 'GCLOUDIGNORE' > .gcloudignore
        .git
        .github
        .gitignore
        .vscode/
        test/
        contracts/
        hardhat.config.js
        artifacts/
        cache/
        scripts/
        *.md
        .env
        .env.*
        Dockerfile
        .dockerignore
        GCLOUDIGNORE
        
        mkdir -p uploads
        
        echo "Files created successfully"
        ls -la
    waitFor: ['install-deps']

  # Deploy to App Engine
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Starting deployment..."
        
        # Verify all required files exist
        echo "Checking required files for deployment..."
        
        REQUIRED_FILES=("server.js" "package.json" "app.yaml")
        MISSING_FILES=()
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            MISSING_FILES+=("$file")
            echo "ERROR: Missing required file: $file"
          else
            echo "✓ Found: $file"
          fi
        done
        
        if [ ${#MISSING_FILES[@]} -ne 0 ]; then
          echo "ERROR: Missing required files for deployment!"
          exit 1
        fi
        
        # Check if node_modules exists (dependencies installed)
        if [ ! -d "node_modules" ]; then
          echo "WARNING: node_modules directory not found"
          echo "Installing dependencies again..."
          npm install --production
        else
          echo "✓ Dependencies are installed"
        fi
        
        # Verify essential directories exist
        mkdir -p uploads
        mkdir -p public
        
        # Show current deployment structure
        echo "Current deployment structure:"
        ls -la
        echo ""
        echo "Package.json content:"
        cat package.json
        echo ""
        echo "App.yaml content:"
        cat app.yaml
        echo ""
        echo "Server.js exists: $([ -f server.js ] && echo 'YES' || echo 'NO')"
        
        # Check App Engine application
        if gcloud app describe &>/dev/null; then
          echo "App Engine application exists, deploying..."
          
          # Deploy with more verbose output for debugging
          gcloud app deploy --quiet --verbosity=info
          
          if [ $? -eq 0 ]; then
            echo "Deployment completed successfully!"
            gcloud app browse --no-launch-browser
          else
            echo "Deployment failed with exit code: $?"
            echo "Check the logs above for more details"
            exit 1
          fi
        else
          echo "App Engine application does not exist."
          echo "Create it at: https://console.cloud.google.com/appengine/start?project=notional-yeti-461501-r9"
          echo "Select region: us-central"
          echo "Then rerun this build."
          echo ""
          echo "All files are prepared and ready for deployment once App Engine app is created."
        fi
    waitFor: ['create-files', 'enable-apis']

substitutions:
  _CONTRACT_ADDRESS: '0x1234567890123456789012345678901234567890'
  _PRIVATE_KEY: ''
  _ADMIN_ADDRESS: ''
  _SEPOLIA_RPC_URL: ''
  _MONGODB_URI: ''
  _ENCRYPTION_KEY: ''

timeout: '900s'

options:
  logging: CLOUD_LOGGING_ONLY