steps:
  # Install dependencies
  - name: 'gcr.io/cloud-builders/npm'
    id: 'install-deps'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing production dependencies..."
        npm install express@^4.18.2 cors@^2.8.5 dotenv@^16.0.3 mongoose@^7.0.3 multer@^1.4.5-lts.1 ethers@^6.0.0 --production --legacy-peer-deps
        echo "Dependencies installed successfully"

  # Enable App Engine API
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'enable-apis'
    args: ['services', 'enable', 'appengine.googleapis.com']
    waitFor: ['-']

  # Prepare server.js
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'prepare-server'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Preparing server.js..."
        if [ -f "server.js" ]; then
          echo "✓ Found existing server.js file"
          sed -i 's/const PORT = process.env.PORT || 5000;/const PORT = process.env.PORT || 8080;/g' server.js
          sed -i "s/app.listen(PORT, () => {/app.listen(PORT, '0.0.0.0', () => {/g" server.js
          echo "✓ Updated server.js for App Engine"
        fi
        mkdir -p routes uploads public

  # Create route files
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-routes'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating route files..."
        
        # Create voters route
        cat > routes/voters.js << 'EOF'
        const express = require('express');
        const router = express.Router();
        
        router.get('/', (req, res) => {
          res.json({ 
            success: true, 
            message: 'Voters endpoint', 
            data: [],
            count: 0,
            timestamp: new Date().toISOString()
          });
        });
        
        router.post('/register', (req, res) => {
          res.json({ success: true, message: 'Voter registration', data: req.body });
        });
        
        router.post('/verify', (req, res) => {
          res.json({ success: true, message: 'Voter verification', data: req.body });
        });
        
        module.exports = router;
        EOF
        
        # Create upload route
        cat > routes/upload.js << 'EOF'
        const express = require('express');
        const multer = require('multer');
        const router = express.Router();
        const upload = multer({ dest: 'uploads/' });
        
        router.post('/', upload.single('file'), (req, res) => {
          res.json({ success: true, message: 'File upload', file: req.file });
        });
        
        module.exports = router;
        EOF

  # Create blockchain and admin routes
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-more-routes'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Create blockchain route
        cat > routes/blockchain.js << 'EOF'
        const express = require('express');
        const router = express.Router();
        
        router.get('/contract', (req, res) => {
          res.json({ 
            success: true,
            contractAddress: process.env.CONTRACT_ADDRESS || null,
            network: 'sepolia',
            rpcUrl: process.env.SEPOLIA_RPC_URL ? 'Configured' : 'Not configured'
          });
        });
        
        router.post('/vote', (req, res) => {
          res.json({ success: true, message: 'Vote submission', data: req.body });
        });
        
        router.get('/results/:electionId', (req, res) => {
          res.json({ success: true, electionId: req.params.electionId, results: [] });
        });
        
        module.exports = router;
        EOF
        
        # Create admin route
        cat > routes/admin.js << 'EOF'
        const express = require('express');
        const router = express.Router();
        
        router.get('/dashboard', (req, res) => {
          res.json({ success: true, message: 'Admin dashboard' });
        });
        
        router.post('/elections', (req, res) => {
          res.json({ success: true, message: 'Create election', data: req.body });
        });
        
        router.get('/elections', (req, res) => {
          res.json({ success: true, elections: [] });
        });
        
        module.exports = router;
        EOF

  # Create deployment files
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Create package.json
        cat > package.json << 'EOF'
        {
          "name": "myvote-backend",
          "version": "1.0.0",
          "main": "server.js",
          "scripts": { "start": "node server.js" },
          "dependencies": {
            "express": "^4.18.2",
            "cors": "^2.8.5",
            "dotenv": "^16.0.3",
            "mongoose": "^7.0.3",
            "multer": "^1.4.5-lts.1",
            "ethers": "^6.0.0"
          },
          "engines": { "node": "20.x", "npm": "10.x" }
        }
        EOF
        
        # Create app.yaml
        cat > app.yaml << 'EOF'
        runtime: nodejs20
        env_variables:
          NODE_ENV: 'production'
          CONTRACT_ADDRESS: "${_CONTRACT_ADDRESS}"
          SEPOLIA_RPC_URL: "${_SEPOLIA_RPC_URL}"
          ADMIN_ADDRESS: "${_ADMIN_ADDRESS}"
          MONGODB_URI: "${_MONGODB_URI}"
          ENCRYPTION_KEY: "${_ENCRYPTION_KEY}"
        automatic_scaling:
          min_instances: 1
          max_instances: 5
        readiness_check:
          path: "/health"
        liveness_check:
          path: "/health"
        EOF
        
        # Create .gcloudignore
        cat > .gcloudignore << 'EOF'
        .git
        .github
        .vscode/
        test/
        contracts/
        hardhat.config.js
        artifacts/
        cache/
        scripts/
        *.md
        .env*
        node_modules/.cache/
        EOF
    waitFor: ['prepare-server', 'create-routes', 'create-more-routes']

  # Deploy to App Engine
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying to App Engine..."
        rm -f package-lock.json
        gcloud app deploy --quiet --verbosity=info
    waitFor: ['create-config', 'enable-apis']

substitutions:
  _CONTRACT_ADDRESS: ''
  _PRIVATE_KEY: ''
  _ADMIN_ADDRESS: ''
  _SEPOLIA_RPC_URL: ''
  _MONGODB_URI: ''
  _ENCRYPTION_KEY: ''

timeout: '900s'

options:
  logging: CLOUD_LOGGING_ONLY