steps:
  # Install dependencies
  - name: 'gcr.io/cloud-builders/npm'
    id: 'install-deps'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing production dependencies..."
        npm install express@^4.18.2 cors@^2.8.5 dotenv@^16.0.3 mongoose@^7.0.3 multer@^1.4.5-lts.1 ethers@^6.0.0 --production --legacy-peer-deps
        echo "Dependencies installed successfully"

  # Enable App Engine API
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'enable-apis'
    args: ['services', 'enable', 'appengine.googleapis.com']
    waitFor: ['-']

  # Prepare server.js
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'prepare-server'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Preparing server.js..."
        if [ -f "server.js" ]; then
          echo "✓ Found existing server.js file"
          sed -i 's/const PORT = process.env.PORT || 5000;/const PORT = process.env.PORT || 8080;/g' server.js
          sed -i "s/app.listen(PORT, () => {/app.listen(PORT, '0.0.0.0', () => {/g" server.js
          echo "✓ Updated server.js for App Engine"
        fi
        mkdir -p uploads public

  # Extract contract address from deployment
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'extract-contract'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Extracting contract address from deployments/sepolia.json..."
        if [ -f "deployments/sepolia.json" ]; then
          CONTRACT_ADDR=$$(cat deployments/sepolia.json | grep -o '"contractAddress"[[:space:]]*:[[:space:]]*"[^"]*"' | grep -o '"[^"]*"$$' | tr -d '"')
          echo "Found contract address: $$CONTRACT_ADDR"
          echo "CONTRACT_ADDRESS=$$CONTRACT_ADDR" > contract.env
          echo "✓ Contract address extracted successfully"
        else
          echo "⚠️  deployments/sepolia.json not found, using empty contract address"
          echo "CONTRACT_ADDRESS=" > contract.env
        fi
    waitFor: ['prepare-server']

  # Create deployment files
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Read contract address from extracted file
        if [ -f "contract.env" ]; then
          source contract.env
          echo "Using contract address: $$CONTRACT_ADDRESS"
        else
          CONTRACT_ADDRESS=""
        fi
        
        # Create package.json
        cat > package.json << 'EOF'
        {
          "name": "myvote-backend",
          "version": "1.0.0",
          "main": "server.js",
          "scripts": { "start": "node server.js" },
          "dependencies": {
            "express": "^4.18.2",
            "cors": "^2.8.5",
            "dotenv": "^16.0.3",
            "mongoose": "^7.0.3",
            "multer": "^1.4.5-lts.1",
            "ethers": "^6.0.0"
          },
          "engines": { "node": "20.x", "npm": "10.x" }
        }
        EOF
        
        # Create app.yaml with dynamic contract address
        cat > app.yaml << EOF
        runtime: nodejs20
        env_variables:
          NODE_ENV: 'production'
          CONTRACT_ADDRESS: '$$CONTRACT_ADDRESS'
          SEPOLIA_RPC_URL: '${_SEPOLIA_RPC_URL}'
          ADMIN_ADDRESS: '${_ADMIN_ADDRESS}'
          MONGODB_URI: '${_MONGODB_URI}'
          ENCRYPTION_KEY: '${_ENCRYPTION_KEY}'
          PRIVATE_KEY: '${_PRIVATE_KEY}'
        automatic_scaling:
          min_instances: 1
          max_instances: 5
        readiness_check:
          path: "/health"
        liveness_check:
          path: "/health"
        EOF
        
        # Create .gcloudignore - be very specific about what to exclude
        cat > .gcloudignore << 'EOF'
        .git/
        .github/
        .vscode/
        test/
        *.md
        .env
        .env.*
        node_modules/.cache/
        npm-debug.log*
        yarn-debug.log*
        yarn-error.log*
        .gitignore
        README.md
        EOF
        
        echo "✓ Configuration files created with contract address: $$CONTRACT_ADDRESS"
    waitFor: ['extract-contract']

  # Verify existing routes are present
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'verify-routes'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Verifying existing backend structure..."
        
        # List entire project structure
        echo "=== PROJECT STRUCTURE ==="
        find . -type f -name "*.js" | grep -E "(routes|controllers|utils|models)" | head -20
        
        # Verify routes directory
        if [ -d "routes" ]; then
          echo "✓ Found routes directory"
          echo "Routes files:"
          ls -la routes/*.js
          
          # Verify each route file has content
          for route in routes/*.js; do
            if [ -f "$route" ]; then
              echo "=== Content preview of $route ==="
              head -10 "$route"
              echo "--- End of $route preview ---"
            fi
          done
        else
          echo "❌ Routes directory not found!"
          exit 1
        fi
        
        # Verify controllers
        if [ -d "controllers" ]; then
          echo "✓ Found controllers:"
          ls -la controllers/*.js
        else
          echo "❌ Controllers directory missing!"
          exit 1
        fi
        
        # Verify utils
        if [ -d "utils" ]; then
          echo "✓ Found utils:"
          ls -la utils/*.js
        else
          echo "❌ Utils directory missing!"
          exit 1
        fi
        
        # Verify models
        if [ -d "models" ]; then
          echo "✓ Found models:"
          ls -la models/*.js
        fi
        
        # Check if artifacts exist (needed for blockchain routes)
        if [ -d "artifacts" ]; then
          echo "✓ Found artifacts directory"
          find artifacts -name "*.json" | head -5
        fi
        
        # Verify deployments
        if [ -d "deployments" ]; then
          echo "✓ Found deployments:"
          ls -la deployments/
        fi
        
        echo "=== VERIFICATION COMPLETE ==="
    waitFor: ['extract-contract']

  # Deploy to App Engine  
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying to App Engine..."
        rm -f package-lock.json
        gcloud app deploy --quiet --verbosity=info
    waitFor: ['create-config', 'enable-apis', 'verify-routes']

substitutions:
  _PRIVATE_KEY: '0xc9fc1cb318be162465ee2e222b94432bbbde124d161a4b058ea74f3ecd16a556'
  _ADMIN_ADDRESS: '0x9a77A46f27ee0663fe44BC3b51dBba37092Cf9c0'
  _SEPOLIA_RPC_URL: 'https://eth-sepolia.g.alchemy.com/v2/tCH4tNrSzoTvWI3mDLhDtEe0sGW-_Koe'
  _MONGODB_URI: 'mongodb+srv://harshitspotify123:lRbdISx8BHsr1h3u@myvote.tvf4crf.mongodb.net/myvote'
  _ENCRYPTION_KEY: ''

timeout: '900s'

options:
  logging: CLOUD_LOGGING_ONLY