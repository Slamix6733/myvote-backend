steps:
  # Install dependencies
  - name: 'gcr.io/cloud-builders/npm'
    id: 'install-deps'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing production dependencies..."
        npm install express@^4.18.2 cors@^2.8.5 dotenv@^16.0.3 mongoose@^7.0.3 multer@^1.4.5-lts.1 ethers@^6.0.0 --production --legacy-peer-deps
        echo "Dependencies installed successfully"

  # Enable App Engine API
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'enable-apis'
    args: ['services', 'enable', 'appengine.googleapis.com']
    waitFor: ['-']

  # Create deployment files
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-files'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating deployment files..."
        
        # Check if server.js exists
        if [ -f "server.js" ]; then
          echo "âœ“ Found existing server.js file"
          echo "First few lines of existing server.js:"
          head -10 server.js
          
          # Update PORT for App Engine if needed
          sed -i 's/const PORT = process.env.PORT || 5000;/const PORT = process.env.PORT || 8080;/g' server.js
          echo "âœ“ Updated PORT to 8080 for App Engine"
          
          # Ensure routes directory exists and create basic route files if missing
          mkdir -p routes
          
          # Create basic voters route if missing
          if [ ! -f "routes/voters.js" ]; then
            echo "Creating routes/voters.js..."
            cat > routes/voters.js << 'ROUTEEOF'
        const express = require('express');
        const router = express.Router();
        
        // Get all voters
        router.get('/', (req, res) => {
          res.json({ success: true, message: 'Voters endpoint', data: [] });
        });
        
        // Register voter
        router.post('/register', (req, res) => {
          res.json({ success: true, message: 'Voter registration endpoint', data: req.body });
        });
        
        // Verify voter
        router.post('/verify', (req, res) => {
          res.json({ success: true, message: 'Voter verification endpoint', data: req.body });
        });
        
        module.exports = router;
        ROUTEEOF
          fi
          
          # Create basic upload route if missing
          if [ ! -f "routes/upload.js" ]; then
            echo "Creating routes/upload.js..."
            cat > routes/upload.js << 'ROUTEEOF'
        const express = require('express');
        const multer = require('multer');
        const router = express.Router();
        
        const upload = multer({ dest: 'uploads/' });
        
        // Upload file
        router.post('/', upload.single('file'), (req, res) => {
          res.json({ 
            success: true, 
            message: 'File upload endpoint',
            file: req.file ? req.file.filename : null
          });
        });
        
        module.exports = router;
        ROUTEEOF
          fi
          
          # Create basic blockchain route if missing
          if [ ! -f "routes/blockchain.js" ]; then
            echo "Creating routes/blockchain.js..."
            cat > routes/blockchain.js << 'ROUTEEOF'
        const express = require('express');
        const router = express.Router();
        
        // Get contract info
        router.get('/contract', (req, res) => {
          res.json({ 
            success: true, 
            contractAddress: process.env.CONTRACT_ADDRESS,
            network: 'sepolia'
          });
        });
        
        // Submit vote
        router.post('/vote', (req, res) => {
          res.json({ success: true, message: 'Vote submission endpoint', data: req.body });
        });
        
        // Get election results
        router.get('/results/:electionId', (req, res) => {
          res.json({ 
            success: true, 
            electionId: req.params.electionId,
            results: []
          });
        });
        
        module.exports = router;
        ROUTEEOF
          fi
          
          # Create basic admin route if missing
          if [ ! -f "routes/admin.js" ]; then
            echo "Creating routes/admin.js..."
            cat > routes/admin.js << 'ROUTEEOF'
        const express = require('express');
        const router = express.Router();
        
        // Get admin dashboard
        router.get('/dashboard', (req, res) => {
          res.json({ success: true, message: 'Admin dashboard endpoint' });
        });
        
        // Create election
        router.post('/elections', (req, res) => {
          res.json({ success: true, message: 'Create election endpoint', data: req.body });
        });
        
        // Get all elections
        router.get('/elections', (req, res) => {
          res.json({ success: true, elections: [] });
        });
        
        module.exports = router;
        ROUTEEOF
          fi
          
        else
          echo "Creating server.js..."
          cat > server.js << 'EOF'
        const express = require('express');
        const cors = require('cors');
        const path = require('path');
        const mongoose = require('mongoose');
        require('dotenv').config();
        
        const app = express();
        const PORT = process.env.PORT || 8080;
        
        // Middleware
        app.use(cors());
        app.use(express.json({ limit: '10mb' }));
        app.use(express.urlencoded({ extended: true, limit: '10mb' }));
        
        // Serve static files from uploads directory
        app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
        
        // Health check endpoint
        app.get('/health', (req, res) => {
            res.status(200).json({
                status: 'OK',
                service: 'myvote-backend',
                timestamp: new Date().toISOString(),
                version: '1.0.0'
            });
        });
        
        // API health check
        app.get('/api/health', (req, res) => {
            res.status(200).json({
                status: 'OK',
                service: 'myvote-api',
                timestamp: new Date().toISOString()
            });
        });
        
        // Database connection
        if (process.env.MONGODB_URI) {
            mongoose.connect(process.env.MONGODB_URI, {
                useNewUrlParser: true,
                useUnifiedTopology: true,
            }).then(() => {
                console.log('Connected to MongoDB successfully');
            }).catch((error) => {
                console.error('MongoDB connection error:', error);
            });
        }
        
        // Import and use routes
        try {
            const voterRoutes = require('./routes/voters');
            const uploadRoutes = require('./routes/upload');
            const blockchainRoutes = require('./routes/blockchain');
            const adminRoutes = require('./routes/admin');
        
            app.use('/api/voters', voterRoutes);
            app.use('/api/upload', uploadRoutes);
            app.use('/api/blockchain', blockchainRoutes);
            app.use('/api/admin', adminRoutes);
        } catch (error) {
            console.error('Error loading routes:', error);
        }
        
        // Error handling middleware
        app.use((err, req, res, next) => {
            console.error('Error:', err);
            res.status(500).json({
                error: 'Internal server error',
                message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
            });
        });
        
        // 404 handler
        app.use('*', (req, res) => {
            res.status(404).json({ error: 'Route not found' });
        });
        
        // Start server
        app.listen(PORT, '0.0.0.0', () => {
            console.log('Server running on port ' + PORT);
            console.log('Health check available at: http://localhost:' + PORT + '/health');
        });
        
        module.exports = app;
        EOF
        
          # Create routes directory and files
          mkdir -p routes
          
          # Create route files (same content as above)
          # ... (route creation code would be repeated here)
        fi
        
        # Create clean package.json for deployment (no hardhat deps)
        echo "Creating deployment package.json without hardhat dependencies..."
        cat > package.json << 'EOF'
        {
          "name": "myvote-backend",
          "version": "1.0.0",
          "description": "MyVote Backend API",
          "main": "server.js",
          "scripts": {
            "start": "node server.js"
          },
          "dependencies": {
            "express": "^4.18.2",
            "cors": "^2.8.5",
            "dotenv": "^16.0.3",
            "mongoose": "^7.0.3",
            "multer": "^1.4.5-lts.1",
            "ethers": "^6.0.0"
          },
          "engines": {
            "node": "20.x",
            "npm": "10.x"
          }
        }
        EOF
        
        # Create app.yaml
        echo "Creating app.yaml..."
        cat > app.yaml << 'EOF'
        runtime: nodejs20
        env: standard
        
        env_variables:
          NODE_ENV: 'production'
          PORT: '8080'
          CONTRACT_ADDRESS: "${_CONTRACT_ADDRESS}"
          SEPOLIA_RPC_URL: "${_SEPOLIA_RPC_URL}"
          ADMIN_ADDRESS: "${_ADMIN_ADDRESS}"
          MONGODB_URI: "${_MONGODB_URI}"
          ENCRYPTION_KEY: "${_ENCRYPTION_KEY}"
        
        automatic_scaling:
          min_instances: 1
          max_instances: 5
          max_concurrent_requests: 80
        
        instance_class: F2
        
        readiness_check:
          path: "/health"
          check_interval_sec: 5
          timeout_sec: 4
          failure_threshold: 2
          success_threshold: 2
          app_start_timeout_sec: 300
        
        liveness_check:
          path: "/health"
          check_interval_sec: 30
          timeout_sec: 4
          failure_threshold: 2
          success_threshold: 2
        
        network:
          session_affinity: false
        EOF
        
        # Create .gcloudignore to exclude development files
        cat > .gcloudignore << 'EOF'
        .git
        .github
        .gitignore
        .vscode/
        test/
        contracts/
        hardhat.config.js
        artifacts/
        cache/
        scripts/
        *.md
        .env
        .env.*
        Dockerfile
        .dockerignore
        node_modules/.cache/
        npm-debug.log*
        yarn-debug.log*
        yarn-error.log*
        # Exclude hardhat development files
        @nomiclabs/
        @nomicfoundation/
        @typechain/
        typechain/
        hardhat/
        EOF
        
        # Remove package-lock.json to avoid conflicts
        rm -f package-lock.json
        
        # Ensure required directories exist
        mkdir -p uploads
        mkdir -p public
        
        echo "Files prepared successfully"
        ls -la
    waitFor: ['install-deps']

  # Deploy to App Engine  
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Starting deployment..."
        
        # Verify required files
        for file in server.js package.json app.yaml; do
          if [ ! -f "$file" ]; then
            echo "ERROR: Missing $file"
            exit 1
          else
            echo "âœ“ Found: $file"
          fi
        done
        
        # Check dependencies
        if [ ! -d "node_modules" ]; then
          echo "Installing dependencies..."
          npm install --production
        fi
        
        # Deploy
        if gcloud app describe &>/dev/null; then
          echo "Deploying to App Engine..."
          gcloud app deploy --quiet --verbosity=info
          
          if [ $? -eq 0 ]; then
            echo "Deployment completed successfully!"
            gcloud app browse --no-launch-browser
          else
            echo "Deployment failed!"
            exit 1
          fi
        else
          echo "App Engine application does not exist."
          echo "Create it at: https://console.cloud.google.com/appengine"
        fi
    waitFor: ['create-files', 'enable-apis']

substitutions:
  _CONTRACT_ADDRESS: '0x1234567890123456789012345678901234567890'
  _PRIVATE_KEY: ''
  _ADMIN_ADDRESS: ''
  _SEPOLIA_RPC_URL: ''
  _MONGODB_URI: ''
  _ENCRYPTION_KEY: ''

timeout: '900s'

options:
  logging: CLOUD_LOGGING_ONLY