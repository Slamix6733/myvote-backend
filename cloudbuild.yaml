steps:
  # Install dependencies with legacy peer deps to handle ethers version conflict
  - name: 'gcr.io/cloud-builders/npm'
    id: 'install'
    args: ['install', '--legacy-peer-deps']
  
  # Enable required APIs
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'enable-apis'
    args: ['services', 'enable', 'appengine.googleapis.com']
    waitFor: ['-']  # Run in parallel with install
  
  # Compile contracts
  - name: 'gcr.io/cloud-builders/npm'
    id: 'compile'
    args: ['run', 'compile']
    waitFor: ['install']
  
  # Check if contract already exists and only deploy if needed
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'check-contract'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Create deployments directory if it doesn't exist
        mkdir -p deployments
        
        # Check if we have a stored contract address in Cloud Storage
        CONTRACT_FILE="gs://notional-yeti-461501-r9-contracts/contract-address.txt"
        if gsutil -q stat "$${CONTRACT_FILE}"; then
          echo "Contract file exists - using existing contract"
          gsutil cp "$${CONTRACT_FILE}" ./contract-address.txt
          STORED_CONTRACT_ADDRESS=$$(cat contract-address.txt)
          echo "Using existing contract at: $$STORED_CONTRACT_ADDRESS"
          echo "$$STORED_CONTRACT_ADDRESS" > ./deployments/contract-address.txt
          # Create deployment file structure for later usage
          echo '{"contractAddress": "'$$STORED_CONTRACT_ADDRESS'"}' > ./deployments/sepolia.json
        else
          echo "No existing contract found - will deploy a new one"
          echo "NEW_DEPLOYMENT=true" > ./deployment.env
        fi
    waitFor: ['compile']
  
  # Deploy contract to Sepolia ONLY if needed
  - name: 'gcr.io/cloud-builders/npm'
    id: 'deploy-contract'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ -f "./deployment.env" ]; then
          echo "Deploying new contract..."
          npm run deploy:sepolia
          
          # Store the contract address for future deployments
          if [ -f "./deployments/sepolia.json" ]; then
            CONTRACT_ADDRESS=$$(cat deployments/sepolia.json | grep -o '"contractAddress": "[^"]*' | grep -o '[^"]*$$')
            echo "$$CONTRACT_ADDRESS" > ./contract-address.txt
            echo "Contract address: $$CONTRACT_ADDRESS"
          else
            echo "Error: Contract deployment failed - sepolia.json not found"
            exit 1
          fi
        else
          echo "Using existing contract - skipping deployment"
        fi
    env:
      - 'PRIVATE_KEY=${_PRIVATE_KEY}'
      - 'SEPOLIA_RPC_URL=${_SEPOLIA_RPC_URL}'
    waitFor: ['check-contract']
  
  # Add a separate step to save to cloud storage
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'save-contract'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ -f "./contract-address.txt" ]; then
          CONTRACT_ADDRESS=$$(cat ./contract-address.txt)
          gsutil cp ./contract-address.txt gs://notional-yeti-461501-r9-contracts/contract-address.txt
          echo "Saved contract address $$CONTRACT_ADDRESS to Cloud Storage"
        else
          echo "No contract address file found to save"
        fi
    waitFor: ['deploy-contract']
  
  # Read contract address and create app.yaml file
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-env'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Reading contract address from sepolia.json"
        if [ -f "./deployments/sepolia.json" ]; then
          CONTRACT_ADDRESS=$$(cat deployments/sepolia.json | grep -o '"contractAddress": "[^"]*' | grep -o '[^"]*$$')
          echo "Using contract address: $$CONTRACT_ADDRESS"
        else
          echo "Error: sepolia.json not found"
          exit 1
        fi

        # Create .gcloudignore file
        echo "# This file specifies files that are *not* uploaded to Google Cloud" > .gcloudignore
        echo "# using gcloud. It follows the same syntax as .gitignore." >> .gcloudignore
        echo ".git" >> .gcloudignore
        echo ".github" >> .gcloudignore
        echo ".gitignore" >> .gcloudignore
        echo "node_modules/" >> .gcloudignore
        echo ".env" >> .gcloudignore
        echo ".env.*" >> .gcloudignore
        echo ".vscode/" >> .gcloudignore
        echo "test/" >> .gcloudignore
        echo "contracts/" >> .gcloudignore
        echo "hardhat.config.js" >> .gcloudignore
        echo "artifacts/" >> .gcloudignore
        echo "cache/" >> .gcloudignore
        echo "# Keep the deployment info" >> .gcloudignore
        echo "!deployments/sepolia.json" >> .gcloudignore
        echo "!server.js" >> .gcloudignore
        echo "!package.json" >> .gcloudignore
        echo "!package-lock.json" >> .gcloudignore
        
        # Update app.yaml to use nodejs20 runtime with automatic scaling
        echo "runtime: nodejs20" > app.yaml
        echo "env: standard" >> app.yaml
        echo "" >> app.yaml
        echo "# Environment variables" >> app.yaml
        echo "env_variables:" >> app.yaml
        echo "  NODE_ENV: 'production'" >> app.yaml
        echo "  PORT: '8080'" >> app.yaml
        echo "  CONTRACT_ADDRESS: \"$$CONTRACT_ADDRESS\"" >> app.yaml
        echo "  SEPOLIA_RPC_URL: \"${_SEPOLIA_RPC_URL}\"" >> app.yaml
        echo "  ADMIN_ADDRESS: \"${_ADMIN_ADDRESS}\"" >> app.yaml
        echo "  MONGODB_URI: \"${_MONGODB_URI}\"" >> app.yaml
        echo "  ENCRYPTION_KEY: \"${_ENCRYPTION_KEY}\"" >> app.yaml
        echo "" >> app.yaml
        echo "# Use automatic scaling" >> app.yaml
        echo "automatic_scaling:" >> app.yaml
        echo "  min_instances: 1" >> app.yaml
        echo "  max_instances: 5" >> app.yaml
        echo "  max_concurrent_requests: 80" >> app.yaml
        echo "" >> app.yaml
        echo "# Health checks" >> app.yaml
        echo "readiness_check:" >> app.yaml
        echo "  path: \"/health\"" >> app.yaml
        echo "  check_interval_sec: 5" >> app.yaml
        echo "  timeout_sec: 4" >> app.yaml
        echo "  failure_threshold: 2" >> app.yaml
        echo "  success_threshold: 2" >> app.yaml
        echo "  app_start_timeout_sec: 300" >> app.yaml
        echo "" >> app.yaml
        echo "liveness_check:" >> app.yaml
        echo "  path: \"/health\"" >> app.yaml
        echo "  check_interval_sec: 30" >> app.yaml
        echo "  timeout_sec: 4" >> app.yaml
        echo "  failure_threshold: 2" >> app.yaml
        echo "  success_threshold: 2" >> app.yaml
        echo "" >> app.yaml
        echo "# Use the correct start command" >> app.yaml
        echo "entrypoint: npm start" >> app.yaml
        echo "" >> app.yaml
        echo "# Use more appropriate instance class" >> app.yaml
        echo "instance_class: F2" >> app.yaml
    waitFor: ['save-contract']
  
  # Check if App Engine exists and create deployment script that handles both cases
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'conditional-deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Check if App Engine application exists
        if gcloud app describe &>/dev/null; then
          echo "App Engine application already exists, proceeding with deployment"
          # Actually run the deployment command
          gcloud app deploy --quiet
        else
          echo "WARNING: App Engine application does not exist."
          echo "Please create an App Engine application manually in the Google Cloud Console:"
          echo "https://console.cloud.google.com/appengine/start?project=notional-yeti-461501-r9"
          echo "Select region 'us-central' and then rerun this build."
          echo ""
          echo "Until then, we're skipping deployment but marking the build as successful."
          if [ -f "./deployments/sepolia.json" ]; then
            echo "The Ethereum contract was successfully deployed at: $$(cat deployments/sepolia.json | grep -o '"contractAddress": "[^"]*' | grep -o '[^"]*$$')"
          fi
          echo "You can manually deploy later after creating the App Engine app."
        fi
    waitFor: ['create-env', 'enable-apis']

# Define substitution variables to be configured in the Cloud Build trigger
substitutions:
  _PRIVATE_KEY: '' # Set this in your Cloud Build trigger
  _ADMIN_ADDRESS: '' # Set this in your Cloud Build trigger
  _SEPOLIA_RPC_URL: '' # Set this in your Cloud Build trigger
  _MONGODB_URI: '' # Set this in your Cloud Build trigger
  _ENCRYPTION_KEY: '' # Set this in your Cloud Build trigger

# Set timeout for the entire build
timeout: '1800s' # 30 minutes

# Enable cloud logging for better debugging
options:
  logging: CLOUD_LOGGING_ONLY